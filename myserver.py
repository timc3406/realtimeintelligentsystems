import socketserver
import pickle
import numpy

class MyTCPHandler(socketserver.BaseRequestHandler):
    #class objects needed
    recognizer_path = "output/recognizer.pickle"
    recognizer = pickle.loads(open(recognizer_path, "rb").read())
    le_path = "output/le.pickle"
    le = pickle.loads(open(le_path, "rb").read())

    def handle(self):
        # self.request is the TCP socket connected to the client
        self.data = self.request.recv(4096)
        # load data request as vector
        vec = pickle.loads(self.data)
        # vec = [-0.012497146613895893,0.035427674651145935,-0.02359144017100334,-0.039144087582826614,-0.0027026894968003035,0.14274005591869354,-0.04068508744239807,0.07805448770523071,-0.19268719851970673,0.10714712738990784,0.0013845853973180056,0.0022672496270388365,0.12928949296474457,-0.13965095579624176,0.0005622520693577826,-0.030709346756339073,-0.12186221033334732,0.047141142189502716,0.03964205086231232,0.12380042672157288,0.14551039040088654,-0.15376684069633484,0.12108404189348221,0.07243920117616653,0.014268006198108196,0.0279405415058136,-0.0894988477230072,-0.23684178292751312,0.07469779253005981,0.0031423333566635847,0.008875327184796333,-0.08815617859363556,-0.07638751715421677,-0.025783924385905266,0.029521310701966286,-0.02829962782561779,-0.13016708195209503,0.1270420402288437,0.01979367434978485,-0.03431680053472519,-0.02751368284225464,-0.09421687573194504,-0.10277879238128662,0.11395854502916336,-0.15966513752937317,-0.10632219910621643,0.14523273706436157,0.014618589542806149,-0.11172372102737427,0.03408226743340492,0.04339423030614853,0.0011623832397162914,-0.033958595246076584,0.011645396240055561,0.022192198783159256,-0.024169566109776497,0.116395004093647,0.0455605573952198,0.04327523335814476,-0.20455563068389893,-0.013837447389960289,-0.010241321288049221,0.15046541392803192,-0.01662926748394966,0.062486130744218826,-0.08036766946315765,0.021720925346016884,0.012387396767735481,0.0020547984167933464,-0.015034458599984646,-0.02362876385450363,0.1524900197982788,-0.04992238059639931,-0.006829113699495792,0.012688597664237022,-0.042503003031015396,-0.13186366856098175,0.05703093484044075,0.12844495475292206,0.21667979657649994,-0.11513497680425644,-0.06758464127779007,0.06099620461463928,0.03140208125114441,-0.0359974168241024,-0.022380758076906204,0.082759790122509,0.10347732901573181,0.14404793083667755,-0.12126358598470688,-0.01617761142551899,0.015705641359090805,0.028064532205462456,0.0015579676255583763,-0.1343226581811905,-0.20611672103405,0.029830491170287132,0.19346316158771515,-0.06332188099622726,-0.08849164098501205,0.048286039382219315,0.06968704611063004,-0.015132860280573368,0.058896470814943314,-0.023137137293815613,0.05497105047106743,-0.002056761411949992,0.12986323237419128,0.1123180165886879,-0.04072974622249603,-0.024308141320943832,0.11762811988592148,-0.07473184168338776,-0.062091730535030365,0.04459868744015694,0.11464253813028336,-0.10543014854192734,-0.06208169832825661,-0.031810738146305084,0.09869986027479172,-0.06635941565036774,-0.08697745203971863,-0.04709775373339653,-0.0407261960208416,-0.10801701992750168,0.09081960469484329,-0.007402262184768915,0.108338862657547]
        vec = numpy.array(vec).reshape(1, -1)

        #prediction
        preds = self.recognizer.predict_proba(vec)[0]

        # return max probability mated with labels
        j = numpy.argmax(preds)
        proba = preds[j]
        name = self.le.classes_[j]

        #dump as json
        result=pickle.dumps([proba,name])
        #send back to client
        self.request.sendall(result)

if __name__ == "__main__":
    HOST, PORT = "localhost", 9999

    with socketserver.TCPServer((HOST, PORT), MyTCPHandler) as server:
        server.serve_forever()
